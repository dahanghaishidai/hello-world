<?xml version="1.0" encoding="UTF-8"?>
<!--suppress ALL -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    
    <!-- 3.配置数据源 ，使用的alibba的数据库-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10"/>
        <property name="minIdle" value="10"/>
        <property name="maxActive" value="50"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- <property name="validationQuery" value="${druid.validationQuery}" /> -->
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="wall,stat" />
    </bean>
    <!--spring mybatis 整合-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!--自动扫描mapping.xml文件-->
        <property name="mapperLocations" value="classpath*:com/jx/modules/dao/*.xml"></property>
    </bean>

    <!--dao下的子类，spring自动查找-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jx.modules.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>

    </bean>

<!--配置事物管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>

    </bean>

<!--配置基于注解的声明式事物-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="0"></tx:annotation-driven>

    <!-- 以AspectJ方式 定义 AOP 用于事务拦截 -->
    <aop:config proxy-target-class="true">
        <aop:advisor pointcut="execution(* com.jx..service..*.*(..))" advice-ref="txAdvice" order="1"/>
    </aop:config>

    <!-- 基本事务定义,使用transactionManager作事务管理 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception,RuntimeException"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
            <tx:method name="do*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>

</beans>